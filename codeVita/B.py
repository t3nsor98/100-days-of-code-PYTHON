def find_letters_in_grid(letter_grid):
    # This dictionary holds the special codes for each letter from A to Z
    letter_codes = {
        (
            "11111",
            "10001",
            "10001",
            "10001",
            "11111",
            "10001",
            "10001",
            "10001",
            "10001",
        ): "A",
        (
            "11111",
            "10001",
            "10001",
            "10001",
            "11111",
            "10001",
            "10001",
            "10001",
            "11111",
        ): "B",
        (
            "11111",
            "10000",
            "10000",
            "10000",
            "10000",
            "10000",
            "10000",
            "10000",
            "11111",
        ): "C",
        (
            "11111",
            "10001",
            "10001",
            "10001",
            "10001",
            "10001",
            "10001",
            "10001",
            "11111",
        ): "D",
        (
            "11111",
            "10000",
            "10000",
            "10000",
            "11111",
            "10000",
            "10000",
            "10000",
            "11111",
        ): "E",
        (
            "11111",
            "10000",
            "10000",
            "10000",
            "11111",
            "10000",
            "10000",
            "10000",
            "10000",
        ): "F",
        (
            "11111",
            "10000",
            "10000",
            "10000",
            "10111",
            "10001",
            "10001",
            "10001",
            "11111",
        ): "G",
        (
            "10001",
            "10001",
            "10001",
            "10001",
            "11111",
            "10001",
            "10001",
            "10001",
            "10001",
        ): "H",
        (
            "11111",
            "00100",
            "00100",
            "00100",
            "00100",
            "00100",
            "00100",
            "00100",
            "11111",
        ): "I",
        (
            "11111",
            "00001",
            "00001",
            "00001",
            "10001",
            "10001",
            "10001",
            "10001",
            "11111",
        ): "J",
        (
            "10001",
            "10010",
            "10100",
            "11000",
            "11111",
            "10001",
            "10001",
            "10001",
            "10001",
        ): "K",
        (
            "10000",
            "10000",
            "10000",
            "10000",
            "10000",
            "10000",
            "10000",
            "10000",
            "11111",
        ): "L",
        (
            "11111",
            "10101",
            "10101",
            "10101",
            "10101",
            "10001",
            "10001",
            "10001",
            "10001",
        ): "M",
        (
            "10001",
            "11001",
            "10101",
            "10011",
            "10001",
            "10001",
            "10001",
            "10001",
            "10001",
        ): "N",
        (
            "01110",
            "10001",
            "10001",
            "10001",
            "10001",
            "10001",
            "10001",
            "10001",
            "01110",
        ): "O",
        (
            "11111",
            "10001",
            "10001",
            "10001",
            "11111",
            "10000",
            "10000",
            "10000",
            "10000",
        ): "P",
        (
            "11111",
            "10001",
            "10001",
            "10001",
            "10101",
            "10001",
            "10011",
            "10001",
            "11111",
        ): "Q",
        (
            "11111",
            "10001",
            "10001",
            "10001",
            "11111",
            "11000",
            "10100",
            "10010",
            "10001",
        ): "R",
        (
            "11111",
            "10000",
            "10000",
            "10000",
            "11111",
            "00001",
            "00001",
            "00001",
            "11111",
        ): "S",
        (
            "11111",
            "00100",
            "00100",
            "00100",
            "00100",
            "00100",
            "00100",
            "00100",
            "00100",
        ): "T",
        (
            "10001",
            "10001",
            "10001",
            "10001",
            "10001",
            "10001",
            "10001",
            "10001",
            "11111",
        ): "U",
        (
            "10001",
            "10001",
            "10001",
            "10001",
            "10001",
            "10001",
            "10001",
            "01010",
            "00100",
        ): "V",
        (
            "10001",
            "10001",
            "10001",
            "10001",
            "10101",
            "10101",
            "10101",
            "10101",
            "11111",
        ): "W",
        (
            "10001",
            "00000",
            "01010",
            "00000",
            "00100",
            "00000",
            "01010",
            "00000",
            "10001",
        ): "X",
        (
            "10001",
            "10001",
            "10001",
            "10001",
            "11111",
            "00001",
            "00001",
            "00001",
            "11111",
        ): "Y",
        (
            "11111",
            "00000",
            "00010",
            "00000",
            "00100",
            "00000",
            "01000",
            "00000",
            "11111",
        ): "Z",
    }

    # Get the number of columns in the grid
    num_cols = len(letter_grid[0])
    decoded_letters = []  # Start with an empty list to store the letters we find
    col_index = 0  # Start looking at the first column

    while col_index < num_cols:
        # Extract a 5-column wide chunk from the grid
        current_chunk = tuple(row[col_index : col_index + 5] for row in letter_grid)

        # Check if this chunk matches any of our letter codes
        if current_chunk in letter_codes:
            # If it matches, add the letter to our list
            decoded_letters.append(letter_codes[current_chunk])
            col_index += 5  # Move to the next chunk (5 columns over)
        else:
            col_index += 1  # If no match, move to the next column

    # Combine all the letters into a single string and return it
    return "".join(decoded_letters)


# --- Getting the grid from the user ---
my_grid = []
for i in range(9):  # Get 9 rows of input
    my_grid.append(str(input()))  # Add each row to our grid

# --- Decoding the grid and printing the result ---
print(find_letters_in_grid(my_grid))  # Call the function and print what it returns
